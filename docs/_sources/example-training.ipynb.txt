{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Building and compiling a model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "from librosa.core import time_to_frames\n",
    "from chimeranet.model import ChimeraNetModel\n",
    "time, sr, hop_length, n_mels = 0.75, 16000, 128, 96\n",
    "T, F, C, D = time_to_frames(time, sr, hop_length), n_mels, 2, 20\n",
    "cm = ChimeraNetModel(T, F, C, D)\n",
    "# build_model returns Keras' Model object\n",
    "model = cm.build_model(n_blstm_units=50, n_blstm_layers=2)\n",
    "model.compile(\n",
    "    'rmsprop',\n",
    "    loss={\n",
    "        'embedding': cm.loss_deepclustering(),\n",
    "        'mask': cm.loss_mask()\n",
    "    },\n",
    "    loss_weights={\n",
    "        'embedding': 0.5,\n",
    "        'mask': 0.5\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training a model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "import h5py\n",
    "# load data first\n",
    "y_train, y_validation = dict(), dict()\n",
    "with h5py.File('example-dataset.h5') as f:\n",
    "    x_train = f['x_train'][()]\n",
    "    y_train['embedding'] = f['y_train_embedding'][()]\n",
    "    y_train['mask'] = f['y_train_mask'][()]\n",
    "    x_validation = f['x_validation'][()]\n",
    "    y_validation['embedding'] = f['y_validation_embedding'][()]\n",
    "    y_validation['mask'] = f['y_validation_mask'][()]\n",
    "# train model by model.fit function\n",
    "history = model.fit(\n",
    "    x=x_train,\n",
    "    y=y_train,\n",
    "    validation_data=(x_validation, y_validation),\n",
    "    batch_size=4,\n",
    "    epochs=5\n",
    ")\n",
    "# finally, save the model\n",
    "model.save('example-model.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training an existing model\n",
    "\n",
    "Since ChimeraNet uses custom loss function, `CustomObjectScope` is necessary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "Currently, ChimeraNetModel wraps partial thing of keras' model.\n",
    "This procedure might be wrapped on future release.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "from keras.models import load_model\n",
    "from keras.utils import CustomObjectScope\n",
    "with CustomObjectScope({\n",
    "    '_loss_deepclustering': cm.loss_deepclustering(),\n",
    "    '_loss_mask': cm.loss_mask(),\n",
    "}):\n",
    "    model = load_model('example-model.h5')\n",
    "model.fit(\n",
    "    x=x_train,\n",
    "    y=y_train,\n",
    "    validation_data=(x_validation, y_validation),\n",
    "    batch_size=1,\n",
    "    initial_epoch=3,\n",
    "    epochs=3+1\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### On learning curve\n",
    "\n",
    "Also, you can plot learning curve. for more information, see keras documentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1d40c5d748>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "for k, v in history.history.items():\n",
    "    plt.plot(v, label=k)\n",
    "plt.xlabel('epochs')\n",
    "plt.ylabel('loss')\n",
    "plt.legend(bbox_to_anchor=(1, 1), bbox_transform=plt.gcf().transFigure)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
